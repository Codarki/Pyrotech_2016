<?xml version="1.0" ?>
<parameters>
	<parameter
		label = "Self illuminate map"
		name = "self_illuminate_map"
		type = "texture2D"
		hlsl = "self_illuminate_texture"
		default_value = "data/images/common/white.tga">
	</parameter>
	<parameter
		label = "Self illuminate color"
		name = "self_illuminate_color"
		type = "float3"
		hlsl = "self_illuminate_color"
		default_value = "1.0 1.0 1.0">
	</parameter>
	<parameter
		label = "Alpha Coeff"
		name = "alpha_coeff"
		type = "float"
		hlsl = "alpha_coeff"
		default_value = "1.0">
	</parameter>
	
	<parameter
		label = "Alpha map 1"
		name = "alpha_map1"
		type = "texture2D"
		hlsl = "alpha_texture1"
		default_value = "data/images/common/white.tga">
	</parameter>
	<parameter
		label = "Alpha map 2"
		name = "alpha_map2"
		type = "texture2D"
		hlsl = "alpha_texture2"
		default_value = "data/images/common/white.tga">
	</parameter>
	
	<parameter
		label = "Alpha texcoord offset 1"
		name = "alpha_texcoord_offset1"
		type = "float3"
		hlsl = "alpha_texcoord_offset1"
		default_value = "0 0 0">
	</parameter>
	<parameter
		label = "Alpha texcoord offset 2"
		name = "alpha_texcoord_offset2"
		type = "float3"
		hlsl = "alpha_texcoord_offset2"
		default_value = "0 0 0">
	</parameter>
</parameters>

<sampler_states>
	<sampler
		name = "self_illuminate_sampler"
		texture = "self_illuminate_texture"
		address_u = "WRAP"
		address_v = "WRAP"
		address_w = "WRAP"
		min_filter = "LINEAR"
		mag_filter = "LINEAR"
		mip_filter = "LINEAR"
		>
	</sampler>
	<sampler
		name = "alpha_sampler1"
		texture = "alpha_texture1"
		address_u = "WRAP"
		address_v = "WRAP"
		address_w = "WRAP"
		min_filter = "LINEAR"
		mag_filter = "LINEAR"
		mip_filter = "LINEAR"
		>
	</sampler>
	<sampler
		name = "alpha_sampler2"
		texture = "alpha_texture2"
		address_u = "WRAP"
		address_v = "WRAP"
		address_w = "WRAP"
		min_filter = "LINEAR"
		mag_filter = "LINEAR"
		mip_filter = "LINEAR"
		>
	</sampler>
</sampler_states>

<streams>
	<stream0
		position = 0
		texcoord = 0>
	</stream0>
</streams>

<additive_blend v = "true"/>
<is_transparent v = "true"/>
<cull_mode v = "NONE"/>

<vertex_shader
	stream = "stream0"
	hlsl = "
	float4x4 object_to_world;
	float4x4 world_to_view_clip;
	float3 alpha_texcoord_offset1;
	float3 alpha_texcoord_offset2;

	struct input_vertex
	{
		float4 position : POSITION;
		float2 texcoord : TEXCOORD0;
	};

	struct output_vertex
	{
		float4 position : POSITION;
		float2 texcoord0 : TEXCOORD0;
		float2 texcoord1 : TEXCOORD1;
		float2 texcoord2 : TEXCOORD2;
	};

	void main_vs(in input_vertex input, out output_vertex output)
	{
		float4 position_in_world = mul(object_to_world, input.position);
		output.position = mul(world_to_view_clip, position_in_world);
		output.texcoord0 = input.texcoord;
		output.texcoord1 = input.texcoord + alpha_texcoord_offset1.xy;
		output.texcoord2 = input.texcoord + alpha_texcoord_offset2.xy;
	}
	">
</vertex_shader>
<pixel_shader
	hlsl = "
	texture2D self_illuminate_texture;
	sampler2D self_illuminate_sampler;
	texture2D alpha_texture1;
	sampler2D alpha_sampler1;
	texture2D alpha_texture2;
	sampler2D alpha_sampler2;
	float3 self_illuminate_color;
	float alpha_coeff;
    	
	void main_ps(
        out float4 color : COLOR0,
        float2 texcoord0 : TEXCOORD0,
		float2 texcoord1 : TEXCOORD1,
		float2 texcoord2 : TEXCOORD2)
	{    
		color.xyzw = tex2D(self_illuminate_sampler, texcoord0).xyzw;
		
		// convert from gamma 2.2 to gamma 1.0
		color = pow(abs(color), 2.2);
		
		float4 alpha1 = tex2D(alpha_sampler1, texcoord1);
		float4 alpha2 = tex2D(alpha_sampler2, texcoord2);
		
		//alpha1 = clamp(alpha1, 0, alpha1);
		//alpha2 = clamp(alpha2, 0, alpha2);
		
		float3 clamped_self_illuminate_color = clamp(self_illuminate_color, 0, self_illuminate_color);
		float clamped_alpha_coeff = saturate(alpha_coeff);
		
		color.xyz *= clamped_self_illuminate_color;
		color.w *= clamped_alpha_coeff;
		
		color *= alpha1;
		color *= alpha2;
	}
	">
</pixel_shader>
