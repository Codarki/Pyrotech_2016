<?xml version="1.0" ?>

<parameters>

	<parameter
		label = "Diffuse map"
		name = "diffuse_map"
		type = "texture2D"
		hlsl = "diffuse_texture"
		default_value = "data/images/common/white.tga">
	</parameter>
    
</parameters>

<sampler_states>

	<sampler
		name = "diffuse_sampler"
		texture = "diffuse_texture"
		address_u = "WRAP"
		address_v = "WRAP"
		address_w = "WRAP"
		min_filter = "LINEAR"
		mag_filter = "LINEAR"
		mip_filter = "LINEAR"
		>
	</sampler>

</sampler_states>
    
<streams>
	<stream0
		position = 0
		tangent = 0
		normal = 0
		texcoord = 0>
	</stream0>
</streams>

<vertex_shader
	stream = "stream0"
	hlsl = "
	#pragma warning( disable : 3206 )
	
	float4x4 object_to_world;
	float4x4 world_to_view_clip;
    float4x4 world_to_view;
    float4x4 projection;
    
    float3 view_in_world;
    float3 light_position_in_world;

	struct input_vertex
	{
		float4 position : POSITION;
	};

	struct output_vertex
	{
		float4 position : POSITION;
        float2 depth : TEXCOORD0;
	};
    
    
	void main_vs(in input_vertex input, out output_vertex output)
	{
        output = (output_vertex)0;
        
        float4 position_in_world = mul(object_to_world, input.position);
		output.position = mul(world_to_view_clip, position_in_world);
        
        //Write non-linear depth
        //output.depth.x = 1.0 - (output.position.z/output.position.w);
        output.depth.x = output.position.z;
        output.depth.y = output.position.w;
        
        
        //Extract near far planes from projetion matrix
        float sngA = projection[2][2];
        float sngB = projection[2][3];
        float near = -sngB / sngA;
        float far  = sngB / (1.0f - sngA);
        
        //Write linear depth 
        //output.depth.x = (output.position.z - near)/( far - near);
	}
	">
</vertex_shader>
<pixel_shader
	hlsl = "
	struct output_vertex
	{
		float4 position : POSITION;
        float2 depth : TEXCOORD0;
	};
    
	float4 main_ps(in output_vertex input) : COLOR
	{
        float depth =1.0 - (input.depth.x / input.depth.y);
        return float4(depth,depth,depth,1);
        //return float4(input.depth.x,input.depth.x,input.depth.x,1);
    }
	">
</pixel_shader>
